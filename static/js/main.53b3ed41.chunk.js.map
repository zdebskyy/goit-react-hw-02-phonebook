{"version":3,"sources":["components/SectionTitle.js","components/NameForm.js","components/NumberForm.js","components/InputForm.js","components/ContatctLits.js","components/Filter.js","App.js","index.js"],"names":["SectionTitle","title","children","NameForm","value","onInputName","placeholder","autoComplete","type","onChange","e","target","name","NumberForm","onInputNumber","InputForm","state","number","handleSubmit","preventDefault","props","allContacts","map","el","find","alert","onAddContact","setState","handleInput","handleNumber","this","onSubmit","Component","ContactList","contacts","onRemoveContact","contact","key","id","onClick","Filter","onChangeFilter","App","filter","changeFilter","getFilteredContacts","toLowerCase","includes","toLocaleLowerCase","addContact","uuidv4","prevState","removeContact","contactId","sortedContacts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.53b3ed41.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction SectionTitle({ title, children }) {\n  return (\n    <section>\n      <h2>{title}</h2>\n      {children}\n    </section>\n  );\n}\n\nSectionTitle.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport default SectionTitle;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction NameForm({ value, onInputName }) {\n  return (\n    <>\n      <label>\n        Name\n        <input\n          placeholder=\"Enter name\"\n          autoComplete=\"off\"\n          type=\"text\"\n          value={value}\n          onChange={(e) => onInputName(e.target.value)}\n          name=\"text\"\n        ></input>\n      </label>\n    </>\n  );\n}\n\nNameForm.propTypes = {\n  value: PropTypes.string.isRequired,\n  onInputName: PropTypes.func.isRequired,\n};\n\nexport default NameForm;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction NumberForm({ value, onInputNumber }) {\n  return (\n    <>\n      <label>\n        Number\n        <input\n          placeholder=\"Enter number\"\n          type=\"number\"\n          value={value}\n          onChange={(e) => onInputNumber(e.target.value)}\n          name=\"number\"\n        ></input>\n      </label>\n    </>\n  );\n}\n\nNumberForm.propTypes = {\n  value: PropTypes.string.isRequired,\n  onInputNumber: PropTypes.func.isRequired,\n};\n\nexport default NumberForm;\n","import React, { Component } from \"react\";\nimport NameForm from \"./NameForm\";\nimport NumberForm from \"./NumberForm\";\nimport PropTypes from \"prop-types\";\n\nexport default class InputForm extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  static propTypes = {\n    allContacts: PropTypes.array.isRequired,\n    onAddContact: PropTypes.func.isRequired,\n  };\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const contactName = this.props.allContacts.map((el) => {\n      return el.name;\n    });\n    const validation = contactName.find((el) => el === this.state.name);\n\n    validation === this.state.name\n      ? alert(\"This contact name already exist\")\n      : this.props.onAddContact(this.state);\n\n    this.setState({ name: \"\", number: \"\" });\n  };\n  handleInput = (value) => {\n    this.setState({ name: value });\n  };\n  handleNumber = (value) => {\n    this.setState({ number: value });\n  };\n  render() {\n    const { name, number } = this.state;\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <NameForm onInputName={this.handleInput} value={name} />\n        <NumberForm onInputNumber={this.handleNumber} value={number} />\n        <button type=\"submit\">Add contact</button>\n      </form>\n    );\n  }\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction ContactList({ contacts, onRemoveContact }) {\n  return (\n    <ul>\n      {contacts.map((contact) => (\n        <li key={contact.id}>\n          <span>\n            {contact.name} : {contact.number}\n          </span>\n          <button type=\"button\" onClick={() => onRemoveContact(contact.id)}>\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  onRemoveContact: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nfunction Filter({ value, onChangeFilter }) {\n  return (\n    <>\n      <input\n        type=\"text\"\n        value={value}\n        onChange={(e) => onChangeFilter(e.target.value)}\n      ></input>\n    </>\n  );\n}\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChangeFilter: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import React, { Component } from \"react\";\nimport SectionTitle from \"./components/SectionTitle\";\nimport InputForm from \"./components/InputForm\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport ContactList from \"./components/ContatctLits\";\nimport Filter from \"./components/Filter\";\n\nexport default class App extends Component {\n  state = {\n    contacts: [],\n    filter: \"\",\n  };\n\n  changeFilter = (filter) => {\n    this.setState({ filter });\n  };\n  getFilteredContacts = () => {\n    const { contacts, filter } = this.state;\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(filter.toLocaleLowerCase())\n    );\n  };\n\n  addContact = ({ name, number }) => {\n    const contact = {\n      id: uuidv4(),\n      name,\n      number,\n    };\n\n    this.setState((prevState) => {\n      return { contacts: [...prevState.contacts, contact] };\n    });\n  };\n  removeContact = (contactId) => {\n    this.setState((prevState) => {\n      return {\n        contacts: prevState.contacts.filter(\n          (contact) => contact.id !== contactId\n        ),\n      };\n    });\n  };\n\n  render() {\n    const { contacts, filter } = this.state;\n    const sortedContacts = this.getFilteredContacts();\n    return (\n      <div>\n        <SectionTitle title=\"PhoneBook\">\n          <InputForm onAddContact={this.addContact} allContacts={contacts} />\n        </SectionTitle>\n\n        <SectionTitle title=\"Contacts\">\n          <Filter value={filter} onChangeFilter={this.changeFilter} />\n          <ContactList\n            contacts={sortedContacts}\n            onRemoveContact={this.removeContact}\n          />\n        </SectionTitle>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}